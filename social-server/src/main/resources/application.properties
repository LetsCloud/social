server.port=8080
#spring-boot.run.workingDirectory=${project.build.directory}/classes/public

logging.level.ROOT: INFO
logging.level.org.springframework.test.web.servlet.result: DEBUG
    
#Cloud Datastore settings

#Enables the Cloud Datastore client. Default value: true
spring.cloud.gcp.datastore.enabled=true
#GCP project ID where the Google Cloud Datastore API is hosted
spring.cloud.gcp.datastore.project-id=mywindspot

#OAuth2 credentials for authenticating with the Google Cloud Datastore API, 
#if different from the ones in the Spring Cloud GCP Core Module
spring.cloud.gcp.datastore.credentials.location=file:/home/robi/Dokumentumok/MyWindSpot-7a339b4fb2f5.json

#Base64-encoded OAuth2 credentials for authenticating with the Google Cloud Datastore API, 
#if different from the ones in the Spring Cloud GCP Core Module
#spring.cloud.gcp.datastore.credentials.encoded-key

#OAuth2 scope for Spring Cloud GCP Cloud Datastore credentials.
#Default value: https://www.googleapis.com/auth/datastore
#spring.cloud.gcp.datastore.credentials.scopes

#The Cloud Datastore namespace to use
#Default value: the Default namespace of Cloud Datastore in your GCP project
#spring.cloud.gcp.datastore.namespace=spring-demo

#The hostname:port of the Datastore Emulator to connect to
#spring.cloud.gcp.datastore.emulator-host

# OAuth2 client registrations 
spring.security.oauth2.client.registration.google.clientId=819092286463-oscgbqsoq72t8outva0m8g6ruhjv59nm.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.clientSecret=guui1o5VD1TAbdcjYP7v3dyc
spring.security.oauth2.client.registration.google.redirectUriTemplate="{baseUrl}/login/oauth2/code/{registrationId}"
spring.security.oauth2.client.registration.google.scope=email,profile

spring.security.oauth2.client.registration.facebook.clientId=369135957063514
spring.security.oauth2.client.registration.facebook.clientSecret=e5a4a6c76a140340087e3cc3950cfd3c
spring.security.oauth2.client.registration.facebook.redirectUriTemplate="{baseUrl}/login/oauth2/code/{registrationId}"
spring.security.oauth2.client.registration.facebook.scope=email, public_profile

spring.security.oauth2.client.registration.github.clientId=d3e47fc2ddd966fa4352
spring.security.oauth2.client.registration.github.clientSecret=3bc0f6b8332f93076354c2a5bada2f5a05aea60d
spring.security.oauth2.client.registration.github.redirectUriTemplate="{baseUrl}/oauth2/callback/{registrationId}"
spring.security.oauth2.client.registration.github.scope=user:email, read:user

app.auth.tokenSecret=926D96C90030DD58429D2751AC1BDBBC
app.auth.tokenExpirationMsec=60000
app.auth.refreshTokenExpirationMsec=7776000000
app.auth.accessTokenCookieName=accessToken
app.auth.refreshTokenCookieName=refreshToken
# app.auth.tokenExpirationMsec=36000
# After successfully authenticating with the OAuth2 Provider,
# we'll be generating an auth token for the user and sending the token to the
# redirectUri mentioned by the client in the /oauth2/authorize request.
# We're not using cookies because they won't work well in mobile clients.
app.oauth2.authorizedRedirectUris=https://mywindspot.appspot.com/oauth2/redirect,http://localhost:8080/oauth2/redirect